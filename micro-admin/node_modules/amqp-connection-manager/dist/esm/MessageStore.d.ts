/// <reference types="node" />
import type * as amqplib from 'amqplib';
export interface PublishMessage {
    type: 'publish';
    exchange: string;
    routingKey: string;
    content: Buffer;
    options?: amqplib.Options.Publish;
    resolve: (result: boolean) => void;
    reject: (err: Error) => void;
    timeout?: NodeJS.Timeout;
    isTimedout: boolean;
}
export interface SendToQueueMessage {
    type: 'sendToQueue';
    queue: string;
    content: Buffer;
    options?: amqplib.Options.Publish;
    resolve: (result: boolean) => void;
    reject: (err: Error) => void;
    timeout?: NodeJS.Timeout;
    isTimedout: boolean;
}
export declare type Message = PublishMessage | SendToQueueMessage;
export interface MessageStore {
    /**
     * This is called before a message is sent, to queue the message.
     */
    queueMessage(message: Message, timeout?: number): void;
    /**
     * Return the next message to send (the oldest queued message).
     */
    getMessageToSend(): Message | undefined;
    /** Returns the number of unsent messages queued in this MessageStore. */
    queueLength(): number;
    /**
     * This is called after a message is sent, to mark the message as unconfirmed.
     */
    messageSent(message: Message): void;
    /**
     * Called when a message failed to send because the connection was temporarily lost.
     */
    messageSendFailed(message: Message): void;
    /**
     * This is called after a message is confirmed, to remove the message from the store.
     */
    messageResolved(message: Message, canSend: boolean): void;
    /**
     * Called when a message has failed and cannot be sent.
     */
    messageRejected(message: Message, err: Error): void;
    /**
     * Called when the channel is closed, to reject any unsent/unconfirmed messages.
     */
    rejectAll(err: Error): void;
}
export declare class InMemoryMessageStore implements MessageStore {
    /** Queued messages, not yet sent. */
    private _messages;
    /** Published, but not yet confirmed messages. */
    private _unconfirmedMessages;
    queueMessage(message: Message, timeout?: number): void;
    getMessageToSend(): Message | undefined;
    queueLength(): number;
    messageSent(message: Message): void;
    messageSendFailed(message: Message): void;
    messageResolved(message: Message, canSend: boolean): void;
    messageRejected(message: Message, err: Error): void;
    rejectAll(err: Error): void;
    private _removeUnconfirmedMessage;
}
